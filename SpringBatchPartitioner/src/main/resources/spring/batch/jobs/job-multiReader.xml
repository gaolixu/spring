<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:batch="http://www.springframework.org/schema/batch" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/batch 
		http://www.springframework.org/schema/batch/spring-batch-2.2.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/util 
		http://www.springframework.org/schema/util/spring-util-3.2.xsd
		">   

 <!-- spring batch core settings -->
	<import resource="../config/context.xml" />
	
	<!-- database settings -->
	<import resource="../config/database.xml" />
	<!-- partitioner job -->
	<job id="multiReaderJob" xmlns="http://www.springframework.org/schema/batch">
	    <batch:listeners>
			<batch:listener ref="appJobExecutionListener" />
		</batch:listeners>
	    <!-- master step, 10 threads (grid-size)  -->
		<step id="firstStep">
			 <tasklet task-executor="threadPoolTaskExecutor" throttle-limit="15">
                <chunk reader="multiFileReader" writer="userItemWriter"   commit-interval="1">
                </chunk>
            </tasklet>
		</step>		
	</job>

	<!-- <bean id="jdbcItemReader" class="org.springframework.batch.item.database.JdbcCursorItemReader" 
        scope="step"> <property name="dataSource" ref="dataSource" /> <property 
        name="sql" value="select id,name,age,score from t_user" /> <property 
        name="rowMapper"> <bean class="org.springframework.jdbc.core.BeanPropertyRowMapper"> 
        <property name="mappedClass" value="com.aliyun.springbatch.sample.db.User" 
        /> </bean> </property> </bean> -->
    <!-- 读文件 多文件上传-->
    <bean id="multiFileReader" class="org.springframework.batch.item.file.MultiResourceItemReader"  scope="step">
<!-- 单个文件读取 -->
        <!-- <property name="resource" value="file:./sample.csv" /> -->
<!-- 多个文件读取  读取文件的位置 -->
        <!-- <property name="resources" value="file:#{jobParameters['inputFile']}" /> -->
        <property name="resources" value="file:D:/CCSP/report/users*.csv" />
    <!-- 引入单个文件的读取对象 -->
        <property name="delegate" ref="flatFileItemReader" />
    </bean>
   
    <bean id="flatFileItemReader"   class="org.springframework.batch.item.file.FlatFileItemReader">
    <!-- 跳过读取文件的第一行 因为第一行是列名-->
    <property name="linesToSkip" value="1"/>
    <!-- 文件的行映射 -->
    <property name="lineMapper">
      <bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
        <!-- 行的字段映射 -->
        <property name="lineTokenizer">
            <!-- 映射的字段以下面names属性，以，隔开 -->
            <bean
                    class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
                <property name="names" value="id,username,password,age" />
            </bean>
        </property>
        <!-- 设置 读取的字段映射给实体对象 -->
        <property name="fieldSetMapper">
            <bean
            class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
                <property name="prototypeBeanName" value="user" />
            </bean>
        </property>
      </bean>
    </property>
  </bean>
  
  <bean id="user" class="com.batch.User"></bean>
    <!-- db数据的写 -->
    <!-- <bean id="jdbcItemWriter"
        class="org.springframework.batch.item.database.JdbcBatchItemWriter">
        <property name="dataSource" ref="dataSource" />
        <property name="sql"
            value="insert into T_DESTUSER (ID,USERID,USERNAME,PASSWORD,UPDATETIME,UPDATEUSER)
                   values
                  (:id,:userId,:userName,:password,:updateDate,:updateUser)" />
        <property name="itemSqlParameterSourceProvider">
            <bean
                class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
        </property>
    </bean> -->
    
    <!-- 这是自定义的实现ItemWriter接口的ItemWriter的实现类 -->
     <!-- <bean id="jdbcItemWriter" class="com.aliyun.springbatch.sample.db.JdbcItemWriter"/> -->
     <bean id="userItemWriter" class="com.batch.UserWriter"/>

</beans>